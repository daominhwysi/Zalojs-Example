import * as puppeteer from 'puppeteer';
import { Page } from 'puppeteer';

interface InitOptions {
    groupName: string;
    groupID: string;
    headless?: boolean;
    port?: boolean;
}
declare function init(options: InitOptions): Promise<{
    browser: puppeteer.Browser;
    page: puppeteer.Page;
}>;

interface MessageCallback {
    content: string;
    time: string;
    messageId: string;
    author: {
        name: string;
    };
}

interface UserType {
    name: string;
    bio: string;
    birth: string;
    number: string;
}
type User = UserType | null;
type UserActionTypes = 'SET_USER' | 'CLEAR_USER';
interface SetUserAction {
    type: 'SET_USER';
    payload: User;
}
interface ClearUserAction {
    type: 'CLEAR_USER';
}
type UserAction = SetUserAction | ClearUserAction;

type MessageOptions = {
    message?: string;
    file?: string;
};

declare class Client {
    private page;
    private events;
    private actions;
    private user;
    constructor(page: Page);
    private setupEventListeners;
    on(event: string, callback: () => void): Promise<void>;
    once(event: string, callback: () => void): Promise<void>;
    send(message: MessageOptions): Promise<void>;
    toConversation(groupName: string, groupSelector: string): Promise<void>;
    getAllMessage(): Promise<{
        content: string | undefined;
        name: string | undefined;
        messageId: string | undefined;
        time: string;
    }[]>;
}

export { type ClearUserAction, type MessageCallback, type MessageOptions, type SetUserAction, type User, type UserAction, type UserActionTypes, type UserType, Client as default, init };
